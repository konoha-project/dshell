package dshell.internal.parser;

import dshell.internal.parser.Node.ArrayNode;
import dshell.internal.parser.Node.AssertNode;
import dshell.internal.parser.Node.AssignNode;
import dshell.internal.parser.Node.BlockNode;
import dshell.internal.parser.Node.BooleanValueNode;
import dshell.internal.parser.Node.BreakNode;
import dshell.internal.parser.Node.CastNode;
import dshell.internal.parser.Node.CatchNode;
import dshell.internal.parser.Node.ClassNode;
import dshell.internal.parser.Node.CommandNode;
import dshell.internal.parser.Node.CondOpNode;
import dshell.internal.parser.Node.ConstructorCallNode;
import dshell.internal.parser.Node.ConstructorNode;
import dshell.internal.parser.Node.ContinueNode;
import dshell.internal.parser.Node.ElementGetterNode;
import dshell.internal.parser.Node.EmptyBlockNode;
import dshell.internal.parser.Node.EmptyNode;
import dshell.internal.parser.Node.ExportEnvNode;
import dshell.internal.parser.Node.FieldGetterNode;
import dshell.internal.parser.Node.FloatValueNode;
import dshell.internal.parser.Node.ForInNode;
import dshell.internal.parser.Node.ForNode;
import dshell.internal.parser.Node.FunctionNode;
import dshell.internal.parser.Node.IfNode;
import dshell.internal.parser.Node.ImportEnvNode;
import dshell.internal.parser.Node.InstanceofNode;
import dshell.internal.parser.Node.IntValueNode;
import dshell.internal.parser.Node.ApplyNode;
import dshell.internal.parser.Node.MapNode;
import dshell.internal.parser.Node.NullNode;
import dshell.internal.parser.Node.OperatorCallNode;
import dshell.internal.parser.Node.ReturnNode;
import dshell.internal.parser.Node.StringValueNode;
import dshell.internal.parser.Node.SuffixIncrementNode;
import dshell.internal.parser.Node.SymbolNode;
import dshell.internal.parser.Node.ThrowNode;
import dshell.internal.parser.Node.TryNode;
import dshell.internal.parser.Node.VarDeclNode;
import dshell.internal.parser.Node.WhileNode;

public interface NodeVisitor <T> {
	// expression
	public T visit(IntValueNode         node);
	public T visit(FloatValueNode       node);
	public T visit(BooleanValueNode     node);
	public T visit(StringValueNode      node);
	public T visit(NullNode             node);
	public T visit(ArrayNode            node);
	public T visit(MapNode              node);
	public T visit(SymbolNode           node);
	public T visit(ElementGetterNode    node);
	public T visit(FieldGetterNode      node);
	public T visit(CastNode             node);
	public T visit(InstanceofNode       node);
	public T visit(OperatorCallNode     node);
	public T visit(ApplyNode            node);
	public T visit(ConstructorCallNode  node);
	public T visit(CondOpNode           node);
	public T visit(CommandNode          node);
	public T visit(EmptyNode            node);
	// statement
	public T visit(AssertNode           node);
	public T visit(BlockNode            node);
	public T visit(BreakNode            node);
	public T visit(ContinueNode         node);
	public T visit(ExportEnvNode        node);
	public T visit(ImportEnvNode        node);
	public T visit(ForNode              node);
	public T visit(ForInNode            node);
	public T visit(WhileNode            node);
	public T visit(IfNode               node);
	public T visit(ReturnNode           node);
	public T visit(ThrowNode            node);
	public T visit(TryNode              node);
	public T visit(CatchNode            node);
	public T visit(VarDeclNode          node);
	public T visit(AssignNode           node);
	public T visit(SuffixIncrementNode  node);
	public T visit(FunctionNode         node);
	public T visit(ClassNode            node);
	public T visit(ConstructorNode      node);
	public T visit(EmptyBlockNode       node);
}
